// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mq.proto

package mq

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingMessage struct {
	Timestamp            uint64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingMessage) Reset()         { *m = PingMessage{} }
func (m *PingMessage) String() string { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()    {}
func (*PingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa8199c0db1966, []int{0}
}

func (m *PingMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingMessage.Unmarshal(m, b)
}
func (m *PingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingMessage.Marshal(b, m, deterministic)
}
func (m *PingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingMessage.Merge(m, src)
}
func (m *PingMessage) XXX_Size() int {
	return xxx_messageInfo_PingMessage.Size(m)
}
func (m *PingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PingMessage proto.InternalMessageInfo

func (m *PingMessage) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PubRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubRequest) Reset()         { *m = PubRequest{} }
func (m *PubRequest) String() string { return proto.CompactTextString(m) }
func (*PubRequest) ProtoMessage()    {}
func (*PubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa8199c0db1966, []int{1}
}

func (m *PubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubRequest.Unmarshal(m, b)
}
func (m *PubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubRequest.Marshal(b, m, deterministic)
}
func (m *PubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubRequest.Merge(m, src)
}
func (m *PubRequest) XXX_Size() int {
	return xxx_messageInfo_PubRequest.Size(m)
}
func (m *PubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubRequest proto.InternalMessageInfo

func (m *PubRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PubRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PubResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubResponse) Reset()         { *m = PubResponse{} }
func (m *PubResponse) String() string { return proto.CompactTextString(m) }
func (*PubResponse) ProtoMessage()    {}
func (*PubResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa8199c0db1966, []int{2}
}

func (m *PubResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubResponse.Unmarshal(m, b)
}
func (m *PubResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubResponse.Marshal(b, m, deterministic)
}
func (m *PubResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubResponse.Merge(m, src)
}
func (m *PubResponse) XXX_Size() int {
	return xxx_messageInfo_PubResponse.Size(m)
}
func (m *PubResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubResponse proto.InternalMessageInfo

type SubRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubRequest) Reset()         { *m = SubRequest{} }
func (m *SubRequest) String() string { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()    {}
func (*SubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa8199c0db1966, []int{3}
}

func (m *SubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubRequest.Unmarshal(m, b)
}
func (m *SubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubRequest.Marshal(b, m, deterministic)
}
func (m *SubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubRequest.Merge(m, src)
}
func (m *SubRequest) XXX_Size() int {
	return xxx_messageInfo_SubRequest.Size(m)
}
func (m *SubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubRequest proto.InternalMessageInfo

func (m *SubRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type SubResponse struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubResponse) Reset()         { *m = SubResponse{} }
func (m *SubResponse) String() string { return proto.CompactTextString(m) }
func (*SubResponse) ProtoMessage()    {}
func (*SubResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa8199c0db1966, []int{4}
}

func (m *SubResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubResponse.Unmarshal(m, b)
}
func (m *SubResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubResponse.Marshal(b, m, deterministic)
}
func (m *SubResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubResponse.Merge(m, src)
}
func (m *SubResponse) XXX_Size() int {
	return xxx_messageInfo_SubResponse.Size(m)
}
func (m *SubResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubResponse proto.InternalMessageInfo

func (m *SubResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*PingMessage)(nil), "mq.PingMessage")
	proto.RegisterType((*PubRequest)(nil), "mq.PubRequest")
	proto.RegisterType((*PubResponse)(nil), "mq.PubResponse")
	proto.RegisterType((*SubRequest)(nil), "mq.SubRequest")
	proto.RegisterType((*SubResponse)(nil), "mq.SubResponse")
}

func init() { proto.RegisterFile("mq.proto", fileDescriptor_7caa8199c0db1966) }

var fileDescriptor_7caa8199c0db1966 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4d, 0x4e, 0x85, 0x30,
	0x14, 0x85, 0x5f, 0x79, 0xcf, 0x1f, 0x2e, 0xfe, 0x24, 0x37, 0x0e, 0x08, 0x71, 0x40, 0x3a, 0x91,
	0x60, 0x42, 0x8c, 0x4e, 0xdd, 0x02, 0x09, 0xb6, 0x2b, 0x28, 0xda, 0x10, 0x12, 0x4b, 0x5b, 0x5b,
	0x06, 0x6e, 0xc0, 0x75, 0x1b, 0x41, 0x2c, 0x32, 0x79, 0xc3, 0x73, 0xf3, 0x9d, 0xaf, 0xcd, 0x81,
	0x73, 0x65, 0x2b, 0xf3, 0xa1, 0xbd, 0xc6, 0x48, 0x59, 0x7a, 0x0f, 0x49, 0xd3, 0x0f, 0x5d, 0x2d,
	0x9d, 0x13, 0x9d, 0xc4, 0x5b, 0x88, 0x7d, 0xaf, 0xa4, 0xf3, 0x42, 0x99, 0x94, 0xe4, 0xa4, 0x38,
	0xb0, 0x70, 0xa0, 0xcf, 0x00, 0xcd, 0xd8, 0x32, 0x69, 0x47, 0xe9, 0x3c, 0xde, 0xc0, 0x89, 0xd7,
	0xa6, 0x7f, 0x9d, 0xb8, 0x98, 0xcd, 0x01, 0x53, 0x38, 0x33, 0xe2, 0xf3, 0x5d, 0x8b, 0xb7, 0x34,
	0xca, 0x49, 0x71, 0xc1, 0x96, 0x48, 0x2f, 0x21, 0x99, 0xda, 0xce, 0xe8, 0xc1, 0x49, 0x4a, 0x01,
	0xf8, 0x11, 0x19, 0xbd, 0x83, 0x84, 0x87, 0xca, 0xda, 0x4d, 0xfe, 0xb9, 0x1f, 0xbf, 0x08, 0x44,
	0xf5, 0x0b, 0x16, 0xb0, 0x6f, 0xc6, 0x16, 0xaf, 0x2a, 0x65, 0xab, 0xf0, 0xd3, 0xec, 0xfa, 0x2f,
	0xff, 0xbe, 0xbd, 0xc3, 0x12, 0xf6, 0x7c, 0x21, 0xf9, 0x86, 0xe4, 0x6b, 0xf2, 0x81, 0x60, 0x09,
	0x87, 0x9f, 0x8d, 0x70, 0xd6, 0x84, 0xb5, 0xb2, 0xed, 0x81, 0xee, 0xda, 0xd3, 0x69, 0xda, 0xa7,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x49, 0x68, 0x32, 0x66, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MQClient is the client API for MQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MQClient interface {
	Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*PubResponse, error)
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (MQ_SubClient, error)
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
}

type mQClient struct {
	cc *grpc.ClientConn
}

func NewMQClient(cc *grpc.ClientConn) MQClient {
	return &mQClient{cc}
}

func (c *mQClient) Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*PubResponse, error) {
	out := new(PubResponse)
	err := c.cc.Invoke(ctx, "/mq.MQ/Pub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (MQ_SubClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MQ_serviceDesc.Streams[0], "/mq.MQ/Sub", opts...)
	if err != nil {
		return nil, err
	}
	x := &mQSubClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MQ_SubClient interface {
	Recv() (*SubResponse, error)
	grpc.ClientStream
}

type mQSubClient struct {
	grpc.ClientStream
}

func (x *mQSubClient) Recv() (*SubResponse, error) {
	m := new(SubResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mQClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, "/mq.MQ/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MQServer is the server API for MQ service.
type MQServer interface {
	Pub(context.Context, *PubRequest) (*PubResponse, error)
	Sub(*SubRequest, MQ_SubServer) error
	Ping(context.Context, *PingMessage) (*PingMessage, error)
}

func RegisterMQServer(s *grpc.Server, srv MQServer) {
	s.RegisterService(&_MQ_serviceDesc, srv)
}

func _MQ_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.MQ/Pub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).Pub(ctx, req.(*PubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQ_Sub_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MQServer).Sub(m, &mQSubServer{stream})
}

type MQ_SubServer interface {
	Send(*SubResponse) error
	grpc.ServerStream
}

type mQSubServer struct {
	grpc.ServerStream
}

func (x *mQSubServer) Send(m *SubResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MQ_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.MQ/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MQ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mq.MQ",
	HandlerType: (*MQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pub",
			Handler:    _MQ_Pub_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MQ_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sub",
			Handler:       _MQ_Sub_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mq.proto",
}
